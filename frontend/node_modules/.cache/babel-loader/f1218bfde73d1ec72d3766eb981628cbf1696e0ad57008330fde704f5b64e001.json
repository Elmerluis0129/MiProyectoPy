{"ast":null,"code":"// Servicio API para consumir el backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';\nexport async function fetchGalleries() {\n  const res = await fetch(`${API_URL}/galleries`);\n  if (!res.ok) throw new Error('Error al obtener galerías');\n  return res.json();\n}\nexport async function createGallery(data) {\n  const res = await fetch(`${API_URL}/galleries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error('Error al crear galería');\n  return res.json();\n}\nexport async function fetchGalleryById(id) {\n  const res = await fetch(`${API_URL}/galleries/id/${id}`);\n  if (!res.ok) throw new Error('Error al obtener galería');\n  const data = await res.json();\n\n  // Mapear los nombres de los campos de snake_case a camelCase\n  return {\n    ...data,\n    allowDownload: data.allow_download || false,\n    allowFinalDownload: data.allow_final_download || false,\n    // Mantener los nombres originales para compatibilidad\n    allow_download: data.allow_download || false,\n    allow_final_download: data.allow_final_download || false\n  };\n}\nexport async function setAllowDownload(id, allowDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-download con:', {\n      id,\n      allowDownload\n    });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-download`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        allowDownload\n      })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowDownload:', error);\n    throw error;\n  }\n}\nexport async function setAllowFinalDownload(id, allowFinalDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-final-download con:', {\n      id,\n      allowFinalDownload\n    });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-final-download`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        allowFinalDownload\n      })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowFinalDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowFinalDownload:', error);\n    throw error;\n  }\n}\nexport async function uploadPhotos({\n  galleryId,\n  owner,\n  files\n}) {\n  const formData = new FormData();\n  formData.append('galleryId', galleryId);\n  formData.append('owner', owner);\n  for (const file of files) {\n    formData.append('photos', file);\n  }\n  const res = await fetch(`${API_URL}/photos/upload-multiple`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!res.ok) throw new Error('Error al subir fotos');\n  return res.json();\n}\nexport async function deleteAllPhotosFromGallery(galleryId) {\n  const res = await fetch(`${API_URL}/photos/gallery/${galleryId}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Error al eliminar todas las fotos');\n  return await res.json();\n}\nexport async function deletePhoto(photoId) {\n  const res = await fetch(`${API_URL}/photos/${photoId}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Error al eliminar foto');\n  return res.json();\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchGalleries","res","fetch","ok","Error","json","createGallery","data","method","headers","body","JSON","stringify","fetchGalleryById","id","allowDownload","allow_download","allowFinalDownload","allow_final_download","setAllowDownload","console","log","text","status","statusText","response","parse","error","setAllowFinalDownload","uploadPhotos","galleryId","owner","files","formData","FormData","append","file","deleteAllPhotosFromGallery","deletePhoto","photoId"],"sources":["C:/Users/elmer/Escritorio/Proyectos Desarrollo Web/Pixieset_Personalizado_Edgar/frontend/src/services/api.js"],"sourcesContent":["// Servicio API para consumir el backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';\n\nexport async function fetchGalleries() {\n  const res = await fetch(`${API_URL}/galleries`);\n  if (!res.ok) throw new Error('Error al obtener galerías');\n  return res.json();\n}\n\nexport async function createGallery(data) {\n  const res = await fetch(`${API_URL}/galleries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  if (!res.ok) throw new Error('Error al crear galería');\n  return res.json();\n}\n\nexport async function fetchGalleryById(id) {\n  const res = await fetch(`${API_URL}/galleries/id/${id}`);\n  if (!res.ok) throw new Error('Error al obtener galería');\n  const data = await res.json();\n  \n  // Mapear los nombres de los campos de snake_case a camelCase\n  return {\n    ...data,\n    allowDownload: data.allow_download || false,\n    allowFinalDownload: data.allow_final_download || false,\n    // Mantener los nombres originales para compatibilidad\n    allow_download: data.allow_download || false,\n    allow_final_download: data.allow_final_download || false\n  };\n}\n\nexport async function setAllowDownload(id, allowDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-download con:', { id, allowDownload });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-download`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ allowDownload })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowDownload:', error);\n    throw error;\n  }\n}\n\nexport async function setAllowFinalDownload(id, allowFinalDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-final-download con:', { id, allowFinalDownload });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-final-download`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ allowFinalDownload })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowFinalDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowFinalDownload:', error);\n    throw error;\n  }\n}\n\n\nexport async function uploadPhotos({ galleryId, owner, files }) {\n  const formData = new FormData();\n  formData.append('galleryId', galleryId);\n  formData.append('owner', owner);\n  for (const file of files) {\n    formData.append('photos', file);\n  }\n  const res = await fetch(`${API_URL}/photos/upload-multiple`, {\n    method: 'POST',\n    body: formData,\n  });\n  if (!res.ok) throw new Error('Error al subir fotos');\n  return res.json();\n}\n\nexport async function deleteAllPhotosFromGallery(galleryId) {\n  const res = await fetch(`${API_URL}/photos/gallery/${galleryId}`, { method: 'DELETE' });\n  if (!res.ok) throw new Error('Error al eliminar todas las fotos');\n  return await res.json();\n}\n\nexport async function deletePhoto(photoId) {\n  const res = await fetch(`${API_URL}/photos/${photoId}`, {\n    method: 'DELETE',\n  });\n  if (!res.ok) throw new Error('Error al eliminar foto');\n  return res.json();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}