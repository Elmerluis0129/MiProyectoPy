{"ast":null,"code":"// Servicio API para consumir el backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';\nexport async function fetchGalleries() {\n  const res = await fetch(`${API_URL}/galleries`);\n  if (!res.ok) throw new Error('Error al obtener galerías');\n  return res.json();\n}\nexport async function createGallery(data) {\n  const res = await fetch(`${API_URL}/galleries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!res.ok) throw new Error('Error al crear galería');\n  return res.json();\n}\nexport async function fetchGalleryById(id) {\n  console.log(`Obteniendo galería con ID: ${id}`);\n  const res = await fetch(`${API_URL}/galleries/${id}`);\n  if (!res.ok) {\n    const errorData = await res.json().catch(() => ({}));\n    console.error('Error al obtener galería:', {\n      status: res.status,\n      error: errorData\n    });\n    throw new Error(errorData.error || 'Error al obtener galería');\n  }\n  const data = await res.json();\n  console.log('Datos de la galería recibidos:', data);\n  return data;\n}\nexport async function setAllowDownload(id, allowDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-download con:', {\n      id,\n      allowDownload\n    });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-download`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        allowDownload\n      })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowDownload:', error);\n    throw error;\n  }\n}\nexport async function setAllowFinalDownload(id, allowFinalDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-final-download con:', {\n      id,\n      allowFinalDownload\n    });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-final-download`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        allowFinalDownload\n      })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowFinalDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowFinalDownload:', error);\n    throw error;\n  }\n}\nexport async function uploadPhotos({\n  galleryId,\n  owner,\n  files\n}) {\n  const formData = new FormData();\n  formData.append('galleryId', galleryId);\n  formData.append('owner', owner);\n  for (const file of files) {\n    formData.append('photos', file);\n  }\n  const res = await fetch(`${API_URL}/photos/upload-multiple`, {\n    method: 'POST',\n    body: formData\n  });\n  if (!res.ok) throw new Error('Error al subir fotos');\n  return res.json();\n}\nexport async function deleteAllPhotosFromGallery(galleryId) {\n  const res = await fetch(`${API_URL}/photos/gallery/${galleryId}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Error al eliminar todas las fotos');\n  return await res.json();\n}\nexport async function deleteGallery(id) {\n  try {\n    console.log(`Eliminando galería con ID: ${id}`);\n    const res = await fetch(`${API_URL}/galleries/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const contentType = res.headers.get('content-type');\n    let errorData = {};\n    if (!res.ok) {\n      try {\n        errorData = await res.json();\n      } catch (jsonError) {\n        const text = await res.text();\n        console.error('Error al parsear respuesta de error:', text);\n        throw new Error(`Error al eliminar la galería: ${res.status} ${res.statusText}`);\n      }\n      throw new Error(errorData.message || `Error al eliminar la galería: ${res.status} ${res.statusText}`);\n    }\n    try {\n      return await res.json();\n    } catch (jsonError) {\n      console.log('La respuesta no contiene JSON, se asume éxito');\n      return {\n        success: true\n      };\n    }\n  } catch (error) {\n    console.error('Error en deleteGallery:', error);\n    throw error;\n  }\n}\nexport async function updateGalleryStatus(id, isActive) {\n  console.log(`Actualizando estado de la galería ${id} a ${isActive ? 'activo' : 'inactivo'}`);\n  try {\n    const res = await fetch(`${API_URL}/galleries/${id}/status`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        isActive\n      })\n    });\n    const responseData = await res.json().catch(() => ({}));\n    if (!res.ok) {\n      console.error('Error en la respuesta del servidor:', {\n        status: res.status,\n        statusText: res.statusText,\n        response: responseData\n      });\n      throw new Error(responseData.message || 'Error al actualizar el estado de la galería');\n    }\n    console.log('Estado de la galería actualizado correctamente:', responseData);\n    return responseData;\n  } catch (error) {\n    console.error('Error en updateGalleryStatus:', error);\n    throw error;\n  }\n}\nexport async function deletePhoto(photoId) {\n  const res = await fetch(`${API_URL}/photos/${photoId}`, {\n    method: 'DELETE'\n  });\n  if (!res.ok) throw new Error('Error al eliminar foto');\n  return res.json();\n}","map":{"version":3,"names":["API_URL","process","env","REACT_APP_API_URL","fetchGalleries","res","fetch","ok","Error","json","createGallery","data","method","headers","body","JSON","stringify","fetchGalleryById","id","console","log","errorData","catch","error","status","setAllowDownload","allowDownload","text","statusText","response","parse","setAllowFinalDownload","allowFinalDownload","uploadPhotos","galleryId","owner","files","formData","FormData","append","file","deleteAllPhotosFromGallery","deleteGallery","contentType","get","jsonError","message","success","updateGalleryStatus","isActive","responseData","deletePhoto","photoId"],"sources":["C:/Users/elmer/Escritorio/Proyectos Desarrollo Web/Pixieset_Personalizado_Edgar/frontend/src/services/api.js"],"sourcesContent":["// Servicio API para consumir el backend\nconst API_URL = process.env.REACT_APP_API_URL || 'http://localhost:4000';\n\nexport async function fetchGalleries() {\n  const res = await fetch(`${API_URL}/galleries`);\n  if (!res.ok) throw new Error('Error al obtener galerías');\n  return res.json();\n}\n\nexport async function createGallery(data) {\n  const res = await fetch(`${API_URL}/galleries`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(data),\n  });\n  if (!res.ok) throw new Error('Error al crear galería');\n  return res.json();\n}\n\nexport async function fetchGalleryById(id) {\n  console.log(`Obteniendo galería con ID: ${id}`);\n  const res = await fetch(`${API_URL}/galleries/${id}`);\n  if (!res.ok) {\n    const errorData = await res.json().catch(() => ({}));\n    console.error('Error al obtener galería:', { status: res.status, error: errorData });\n    throw new Error(errorData.error || 'Error al obtener galería');\n  }\n  const data = await res.json();\n  console.log('Datos de la galería recibidos:', data);\n  return data;\n}\n\nexport async function setAllowDownload(id, allowDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-download con:', { id, allowDownload });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-download`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ allowDownload })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowDownload:', error);\n    throw error;\n  }\n}\n\nexport async function setAllowFinalDownload(id, allowFinalDownload) {\n  try {\n    console.log('Enviando PATCH a /allow-final-download con:', { id, allowFinalDownload });\n    const res = await fetch(`${API_URL}/galleries/${id}/allow-final-download`, {\n      method: 'PATCH',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({ allowFinalDownload })\n    });\n    const text = await res.text();\n    console.log('Respuesta setAllowFinalDownload:', {\n      status: res.status,\n      statusText: res.statusText,\n      response: text\n    });\n    if (!res.ok) {\n      throw new Error(`Error ${res.status}: ${text || 'Error desconocido'}`);\n    }\n    return text ? JSON.parse(text) : {};\n  } catch (error) {\n    console.error('Error en setAllowFinalDownload:', error);\n    throw error;\n  }\n}\n\n\nexport async function uploadPhotos({ galleryId, owner, files }) {\n  const formData = new FormData();\n  formData.append('galleryId', galleryId);\n  formData.append('owner', owner);\n  for (const file of files) {\n    formData.append('photos', file);\n  }\n  const res = await fetch(`${API_URL}/photos/upload-multiple`, {\n    method: 'POST',\n    body: formData,\n  });\n  if (!res.ok) throw new Error('Error al subir fotos');\n  return res.json();\n}\n\nexport async function deleteAllPhotosFromGallery(galleryId) {\n  const res = await fetch(`${API_URL}/photos/gallery/${galleryId}`, { method: 'DELETE' });\n  if (!res.ok) throw new Error('Error al eliminar todas las fotos');\n  return await res.json();\n}\n\nexport async function deleteGallery(id) {\n  try {\n    console.log(`Eliminando galería con ID: ${id}`);\n    const res = await fetch(`${API_URL}/galleries/${id}`, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    \n    const contentType = res.headers.get('content-type');\n    let errorData = {};\n    \n    if (!res.ok) {\n      try {\n        errorData = await res.json();\n      } catch (jsonError) {\n        const text = await res.text();\n        console.error('Error al parsear respuesta de error:', text);\n        throw new Error(`Error al eliminar la galería: ${res.status} ${res.statusText}`);\n      }\n      throw new Error(errorData.message || `Error al eliminar la galería: ${res.status} ${res.statusText}`);\n    }\n    \n    try {\n      return await res.json();\n    } catch (jsonError) {\n      console.log('La respuesta no contiene JSON, se asume éxito');\n      return { success: true };\n    }\n  } catch (error) {\n    console.error('Error en deleteGallery:', error);\n    throw error;\n  }\n}\n\nexport async function updateGalleryStatus(id, isActive) {\n  console.log(`Actualizando estado de la galería ${id} a ${isActive ? 'activo' : 'inactivo'}`);\n  try {\n    const res = await fetch(`${API_URL}/galleries/${id}/status`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ isActive }),\n    });\n    \n    const responseData = await res.json().catch(() => ({}));\n    \n    if (!res.ok) {\n      console.error('Error en la respuesta del servidor:', {\n        status: res.status,\n        statusText: res.statusText,\n        response: responseData\n      });\n      throw new Error(responseData.message || 'Error al actualizar el estado de la galería');\n    }\n    \n    console.log('Estado de la galería actualizado correctamente:', responseData);\n    return responseData;\n  } catch (error) {\n    console.error('Error en updateGalleryStatus:', error);\n    throw error;\n  }\n}\n\nexport async function deletePhoto(photoId) {\n  const res = await fetch(`${API_URL}/photos/${photoId}`, {\n    method: 'DELETE',\n  });\n  if (!res.ok) throw new Error('Error al eliminar foto');\n  return res.json();\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}